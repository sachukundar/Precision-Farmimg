#include <ESP8266WiFi.h>
#include <WiFiClient.h>
#include <ESP8266WebServer.h>
#include <SFE_BMP180.h>
#include <Wire.h>
#include <ESP8266HTTPClient.h>
#include <ArduinoJson.h>
#include "DHT.h"        // including the library of DHT11 temperature and humidity sensor
#define DHTTYPE DHT11   // DHT 11

#define dht_dpin D6
DHT dht(dht_dpin, DHTTYPE);
 
// You will need to create an SFE_BMP180 object, here called "pressure":
 
SFE_BMP180 pressure;
 
// Replace with your network credentials
const char* ssid = "Realme 1";
const char* password = "sachuabcd";
 
ESP8266WebServer server(80);   //instantiate server at port 80 (http port)
 
String page = "";
double data;
char status;
double T,P,p0,a,H,SMS=0.0;
float h,t;
void setup(void){
  
  delay(1000);
  Serial.begin(115200);
  WiFi.begin(ssid, password); //begin WiFi connection
  Serial.println("");
  
  // Wait for connection
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("");
  Serial.print("Connected to ");
  Serial.println(ssid);
  Serial.print("IP address: ");
  Serial.println(WiFi.localIP());
  server.on("/", [](){
    page = "<center><h1>PRECISION FARMING</h1><br><br><h1>Data:</h1><br><h1>Humidity:"+String(H)+" %<br><br>Temperature:"+String(t)+" C<br><br>Pressure:"+String(P)+" mb</h1></center>";
    server.send(200, "text/html", page);
  });
  
  server.begin();
  Serial.println("Web server started!");
  dht.begin();
  Serial.println("PRECISION FARMIMG");
  if (pressure.begin())
    Serial.println("BMP180 init success");
 
  // Initialize the sensor (it is important to get calibration values stored on the device).
 
}
 
void loop(void){
    //This is DHT11 values
    Serial.println("This is DHT11 values");
    h = dht.readHumidity();
    t = dht.readTemperature();         
    Serial.print("Current humidity = ");
    Serial.print(h);
    Serial.print("%  ");
    Serial.print("temperature = ");
    Serial.print(t); 
    Serial.println("C  ");
  status = pressure.startTemperature();
  if (status != 0)
  {
    delay(status);
    status = pressure.getTemperature(T);
    if (status != 0)
    {
      //This is BMP values
      Serial.println("This is BMP values");
      H = dht.readHumidity(); //DHT11 humidity
      // Print out the measurement:
      Serial.print("Humidity: ");
      Serial.print(H,2);
      Serial.print("temperature: ");
      Serial.print(T,2);
      Serial.print(" deg C, ");
      Serial.print((9.0/5.0)*T+32.0,2);
      Serial.println(" deg F");
      
      status = pressure.startPressure(3);
      if (status != 0)
      {
        delay(status);
        status = pressure.getPressure(P,T);
        if (status != 0)
        {
          // Print out the measurement:
          Serial.print("absolute pressure: ");
          Serial.print(P,2);
          Serial.print(" mb, ");
          Serial.print(P*0.0295333727,2);
          Serial.println(" inHg");
          Serial.println();
          Serial.println();

          HTTPClient http;    //Declare object of class HTTPClient
 
          http.begin("http://192.168.43.129:8000/api/");      //Specify request destination
          http.addHeader("Content-Type", "application/json");  //Specify content-type header

          String data;
          DynamicJsonDocument doc(1024);
//          doc["title"] = "value";
          doc["Temperature"] = t;
          doc["Humidity"] = h;
          doc["Pressure"] = P;
          doc["SMS"]=SMS;
          serializeJson(doc, Serial);
          serializeJson(doc, data);   
   
          int httpCode = http.POST(data);   //Send the request
          String payload = http.getString();                  //Get the response payload
 
          Serial.println(httpCode);   //Print HTTP return code
          Serial.println(payload);    //Print request response payload
 
          http.end();  //Close connection
 
          
          }
        else Serial.println("error retrieving pressure measurement\n");
      }
      else Serial.println("error starting pressure measurement\n");
    }
    else Serial.println("error retrieving temperature measurement\n");
  }
  else Serial.println("error starting temperature measurement\n");
 
  delay(30000);  // Pause for 5 seconds.

  server.handleClient();
}
